services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: emr-redis
    restart: unless-stopped
    networks:
      - emr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: emr-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: emr_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-emr_password}
      POSTGRES_DB: emr_db
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - emr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U emr_user -d emr_db"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s

  # HAPI FHIR JPA Server
  hapi-fhir:
    image: hapiproject/hapi:latest
    container_name: emr-hapi-fhir
    restart: unless-stopped
    environment:
      # Database Configuration
      spring.datasource.url: jdbc:postgresql://postgres:5432/emr_db
      spring.datasource.username: emr_user
      spring.datasource.password: ${POSTGRES_PASSWORD:-emr_password}
      spring.datasource.driverClassName: org.postgresql.Driver
      spring.jpa.properties.hibernate.dialect: ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgres94Dialect

      # HAPI FHIR Configuration
      hapi.fhir.fhir_version: R4
      hapi.fhir.server_address: https://${DOMAIN}/fhir
      hapi.fhir.allow_external_references: true
      hapi.fhir.allow_multiple_delete: true
      hapi.fhir.allow_cascading_deletes: true
      hapi.fhir.cors.allowed_origin: "*"

      # Performance settings
      hapi.fhir.reuse_cached_search_results_millis: 60000
      hapi.fhir.default_page_size: 20
      hapi.fhir.max_page_size: 500
    networks:
      - emr-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/fhir/metadata || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: emr-backend
    restart: unless-stopped
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backend/data/generated_dicoms:/app/data/generated_dicoms
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql+asyncpg://emr_user:${POSTGRES_PASSWORD:-emr_password}@postgres:5432/emr_db
      - JWT_ENABLED=false
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - REDIS_URL=redis://redis:6379/0
      - USE_REDIS_CACHE=true
      - HAPI_FHIR_URL=http://hapi-fhir:8080/fhir
    networks:
      - emr-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      hapi-fhir:
        condition: service_healthy

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_FHIR_ENDPOINT=https://${DOMAIN}/fhir/R4
        - REACT_APP_EMR_API=https://${DOMAIN}/api/emr
        - REACT_APP_CLINICAL_CANVAS_API=https://${DOMAIN}/api/clinical-canvas
        - REACT_APP_API_URL=https://${DOMAIN}
    container_name: emr-frontend
    restart: unless-stopped
    networks:
      - emr-network
    depends_on:
      - backend

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: emr-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - frontend_build:/usr/share/nginx/html:ro
    networks:
      - emr-network
    depends_on:
      - backend
      - frontend
      - hapi-fhir
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for Let's Encrypt SSL
  certbot:
    image: certbot/certbot
    container_name: emr-certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  emr-network:
    driver: bridge

volumes:
  postgres_data:
  frontend_build:
