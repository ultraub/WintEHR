services:
  # PostgreSQL Database (same as production)
  postgres:
    image: postgres:15-alpine
    container_name: emr-postgres
    environment:
      POSTGRES_USER: emr_user
      POSTGRES_PASSWORD: emr_password
      POSTGRES_DB: emr_db
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - emr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U emr_user -d emr_db && psql -U emr_user -d emr_db -c 'SELECT 1 FROM fhir.resources LIMIT 1;' > /dev/null 2>&1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s

  # Backend API with hot reload
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: emr-backend-dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backend/data/generated_dicoms:/app/data/generated_dicoms
      # Exclude __pycache__ and other Python artifacts
      - /app/__pycache__
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DATABASE_URL=postgresql+asyncpg://emr_user:emr_password@postgres:5432/emr_db
      - JWT_ENABLED=false
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - WATCHFILES_FORCE_POLLING=true
    networks:
      - emr-network
    depends_on:
      postgres:
        condition: service_healthy
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--reload-dir", "/app"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend with hot reload
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: emr-frontend-dev
    ports:
      - "3000:3000"
      - "3001:3001"  # WebSocket port for hot reload
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - ./frontend/craco.config.js:/app/craco.config.js
      - ./frontend/setupProxy.js:/app/setupProxy.js
      # Exclude node_modules to prevent conflicts
    environment:
      - REACT_APP_API_URL=/api
      - REACT_APP_FHIR_ENDPOINT=/fhir/R4
      - REACT_APP_EMR_API=/api/emr
      - REACT_APP_CLINICAL_CANVAS_API=/api/clinical-canvas
      - CHOKIDAR_USEPOLLING=true  # For file watching in Docker
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
      - HOST=0.0.0.0  # Bind to all interfaces for Docker access
      - PORT=3000
      # Remove WDS_SOCKET_HOST to use default behavior
      # React dev server will auto-detect the correct host
      - WDS_SOCKET_PORT=0  # Auto-select WebSocket port
      - DANGEROUSLY_DISABLE_HOST_CHECK=true  # Allow connections from any host
    networks:
      - emr-network
    depends_on:
      - backend
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s  # Increased for initial npm install

networks:
  emr-network:
    driver: bridge

volumes:
  postgres_data: