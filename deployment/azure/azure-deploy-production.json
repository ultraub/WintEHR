{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmName": {
      "type": "string",
      "defaultValue": "emr-production-vm",
      "metadata": {
        "description": "Name of the virtual machine"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "emradmin",
      "metadata": {
        "description": "Admin username for the VM"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine"
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D4s_v3",
      "allowedValues": [
        "Standard_B2ms",
        "Standard_B4ms",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3"
      ],
      "metadata": {
        "description": "Size of the virtual machine"
      }
    },
    "deploymentProfile": {
      "type": "string",
      "defaultValue": "production",
      "allowedValues": [
        "local_dev",
        "production",
        "cloud"
      ],
      "metadata": {
        "description": "Deployment profile (controls patient count and features)"
      }
    },
    "enableHttps": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable HTTPS with SSL certificate"
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Custom domain name for the EMR system"
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "networkSecurityGroupName": "[concat(parameters('vmName'), '-nsg')]",
    "virtualNetworkName": "[concat(parameters('vmName'), '-vnet')]",
    "subnetName": "default",
    "publicIpAddressName": "[concat(parameters('vmName'), '-ip')]",
    "networkInterfaceName": "[concat(parameters('vmName'), '-nic')]",
    "storageAccountName": "[concat('emrdicom', uniqueString(resourceGroup().id))]",
    "containerName": "dicom-storage",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-07-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "HTTP",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "HTTPS",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "SSH",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-07-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-07-01",
      "name": "[variables('publicIpAddressName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[toLower(parameters('vmName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-07-01",
      "name": "[variables('networkInterfaceName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2022-09-01",
      "name": "[concat(variables('storageAccountName'), '/default/', variables('containerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-11-01",
      "name": "[parameters('vmName')]",
      "location": "[variables('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "0001-com-ubuntu-server-focal",
            "sku": "20_04-lts-gen2",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            },
            "diskSizeGB": 128
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-11-01",
      "name": "[concat(parameters('vmName'), '/installEMR')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "script": "[base64(concat('#!/bin/bash\nset -e\n\n# Log output\nexec > >(tee -a /var/log/emr-install.log)\nexec 2>&1\n\necho \"Starting EMR installation at $(date)\"\n\n# Update system\napt-get update\napt-get upgrade -y\n\n# Install dependencies\napt-get install -y \\\n    docker.io \\\n    docker-compose \\\n    git \\\n    python3 \\\n    python3-pip \\\n    openjdk-11-jre-headless \\\n    nginx \\\n    certbot \\\n    python3-certbot-nginx \\\n    curl \\\n    htop \\\n    tmux\n\n# Enable and start Docker\nsystemctl enable docker\nsystemctl start docker\nusermod -a -G docker ', parameters('adminUsername'), '\n\n# Install Azure CLI\ncurl -sL https://aka.ms/InstallAzureCLIDeb | bash\n\n# Create EMR directory\nmkdir -p /opt/emr\ncd /opt/emr\n\n# Clone repository or create structure\ngit clone https://github.com/your-repo/emr-system.git . || {\n    echo \"Creating minimal structure...\"\n    mkdir -p backend frontend scripts\n}\n\n# Create deployment configuration\ncat > deployment.config.json << \"CONFIG\"\n{\n  \"deployment_profiles\": {\n    \"local_dev\": {\n      \"patient_count\": 10,\n      \"provider_count\": 3,\n      \"enable_clinical_notes\": true,\n      \"enable_imaging\": true,\n      \"enable_labs_with_ranges\": true,\n      \"enable_cds_hooks\": true,\n      \"enable_fhir\": true,\n      \"database_type\": \"sqlite\"\n    },\n    \"production\": {\n      \"patient_count\": 100,\n      \"provider_count\": 20,\n      \"enable_clinical_notes\": true,\n      \"enable_imaging\": true,\n      \"enable_labs_with_ranges\": true,\n      \"enable_cds_hooks\": true,\n      \"enable_fhir\": true,\n      \"database_type\": \"sqlite\",\n      \"azure_storage_account\": \"', variables('storageAccountName'), '\",\n      \"azure_container\": \"', variables('containerName'), '\"\n    },\n    \"cloud\": {\n      \"patient_count\": 200,\n      \"provider_count\": 50,\n      \"enable_clinical_notes\": true,\n      \"enable_imaging\": true,\n      \"enable_labs_with_ranges\": true,\n      \"enable_cds_hooks\": true,\n      \"enable_fhir\": true,\n      \"database_type\": \"postgresql\"\n    }\n  }\n}\nCONFIG\n\n# Create environment file\ncat > .env << \"ENV\"\nDEPLOYMENT_PROFILE=', parameters('deploymentProfile'), '\nDATABASE_URL=sqlite:///./data/emr.db\nSECRET_KEY=$(openssl rand -hex 32)\nJWT_ALGORITHM=HS256\nJWT_EXPIRATION_HOURS=8\nCORS_ORIGINS=*\nREACT_APP_API_URL=\nBACKEND_PORT=8000\nFRONTEND_PORT=80\nLOG_LEVEL=INFO\nAZURE_STORAGE_ACCOUNT=', variables('storageAccountName'), '\nAZURE_CONTAINER=', variables('containerName'), '\nENV\n\n# Get storage account key using managed identity\naz login --identity\nSTORAGE_KEY=$(az storage account keys list -g ', resourceGroup().name, ' -n ', variables('storageAccountName'), ' --query \"[0].value\" -o tsv)\necho \"AZURE_STORAGE_KEY=$STORAGE_KEY\" >> .env\n\n# Create Docker Compose file\nif [ ! -f docker-compose.deployment.yml ]; then\n    cp /opt/emr/docker-compose.deployment.yml docker-compose.yml || \\\n    wget -O docker-compose.yml https://raw.githubusercontent.com/your-repo/emr-system/main/docker-compose.deployment.yml || \\\n    echo \"Failed to get docker-compose file\"\nfi\n\n# Build and start services\ndocker-compose build\ndocker-compose up -d backend frontend\n\n# Wait for backend health\nfor i in {1..30}; do\n    if curl -f http://localhost:8000/api/health &>/dev/null; then\n        echo \"Backend is healthy!\"\n        break\n    fi\n    echo \"Waiting for backend... ($i/30)\"\n    sleep 5\ndone\n\n# Initialize data\ndocker-compose run --rm -e DEPLOYMENT_PROFILE=', parameters('deploymentProfile'), ' data-init || echo \"Data init failed\"\n\n# Configure nginx\ncat > /etc/nginx/sites-available/emr << \"NGINX\"\nserver {\n    listen 80;\n    server_name _;\n    \n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n    \n    location /api {\n        proxy_pass http://localhost:8000;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\nNGINX\n\nln -sf /etc/nginx/sites-available/emr /etc/nginx/sites-enabled/\nrm -f /etc/nginx/sites-enabled/default\nsystemctl restart nginx\n\n# Setup HTTPS if enabled\nif [ \"', string(parameters('enableHttps')), '\" == \"true\" ] && [ -n \"', parameters('domainName'), '\" ]; then\n    certbot --nginx -d ', parameters('domainName'), ' --non-interactive --agree-tos --email admin@', parameters('domainName'), ' || echo \"Certbot failed\"\nfi\n\n# Create systemd service\ncat > /etc/systemd/system/emr.service << \"SYSTEMD\"\n[Unit]\nDescription=EMR Production System\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nWorkingDirectory=/opt/emr\nExecStart=/usr/bin/docker-compose up -d\nExecStop=/usr/bin/docker-compose down\nUser=root\n\n[Install]\nWantedBy=multi-user.target\nSYSTEMD\n\nsystemctl daemon-reload\nsystemctl enable emr.service\n\n# Setup backup script\ncat > /opt/emr/backup.sh << \"BACKUP\"\n#!/bin/bash\nBACKUP_DIR=\"/opt/emr/backups\"\nmkdir -p $BACKUP_DIR\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Backup database\ndocker exec emr-backend sqlite3 /app/data/emr.db \".backup /app/data/backup_$DATE.db\"\n\n# Compress and upload to Azure\ntar -czf $BACKUP_DIR/emr_backup_$DATE.tar.gz -C /opt/emr/backend/data .\naz storage blob upload \\\n    --account-name ', variables('storageAccountName'), ' \\\n    --account-key \"$STORAGE_KEY\" \\\n    --container-name backups \\\n    --name emr_backup_$DATE.tar.gz \\\n    --file $BACKUP_DIR/emr_backup_$DATE.tar.gz\n\n# Clean up old local backups\nfind $BACKUP_DIR -name \"emr_backup_*.tar.gz\" -mtime +7 -delete\nBACKUP\n\nchmod +x /opt/emr/backup.sh\n\n# Schedule daily backups\necho \"0 2 * * * /opt/emr/backup.sh >> /var/log/emr-backup.log 2>&1\" | crontab -\n\n# Set permissions\nchown -R ', parameters('adminUsername'), ':', parameters('adminUsername'), ' /opt/emr\n\necho \"EMR installation completed at $(date)\"\necho \"Access the system at http://$(curl -s ifconfig.me)\"\n\n# Mark completion\ntouch /opt/emr/.deployment_complete\n'))]"
        }
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(concat(resourceGroup().id, parameters('vmName'), 'contributor'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-11-01', 'Full').identity.principalId]",
        "scope": "[resourceGroup().id]"
      }
    }
  ],
  "outputs": {
    "vmPublicIpAddress": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))).ipAddress]"
    },
    "vmFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))).dnsSettings.fqdn]"
    },
    "emrUrl": {
      "type": "string",
      "value": "[concat('http://', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))).ipAddress)]"
    },
    "sshCommand": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))).ipAddress)]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    }
  }
}