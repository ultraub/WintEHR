{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "EMR Training System - Azure Deployment Template"
  },
  "parameters": {
    "vmName": {
      "type": "string",
      "defaultValue": "emr-training-vm",
      "metadata": {
        "description": "Name of the virtual machine"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Admin username for the VM"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine"
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B2ms",
      "allowedValues": [
        "Standard_B2s",
        "Standard_B2ms",
        "Standard_B4ms",
        "Standard_D2s_v3",
        "Standard_D4s_v3"
      ],
      "metadata": {
        "description": "Size of the virtual machine"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "patientCount": {
      "type": "int",
      "defaultValue": 50,
      "minValue": 10,
      "maxValue": 500,
      "metadata": {
        "description": "Number of synthetic patients to generate"
      }
    },
    "allowedSourceIP": {
      "type": "string",
      "defaultValue": "*",
      "metadata": {
        "description": "Source IP address or range allowed to access the EMR system"
      }
    }
  },
  "variables": {
    "nicName": "[concat(parameters('vmName'), '-nic')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "emr-subnet",
    "subnetPrefix": "10.0.0.0/24",
    "publicIPAddressName": "[concat(parameters('vmName'), '-ip')]",
    "virtualNetworkName": "[concat(parameters('vmName'), '-vnet')]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "networkSecurityGroupName": "[concat(parameters('vmName'), '-nsg')]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "dnsLabelPrefix": "[toLower(concat('emr-', uniqueString(resourceGroup().id)))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2021-05-01",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsLabelPrefix')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2021-05-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "HTTP",
            "properties": {
              "description": "Allow HTTP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "[parameters('allowedSourceIP')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "SSH",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "[parameters('allowedSourceIP')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-05-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2021-05-01",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-11-01",
      "name": "[parameters('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "0001-com-ubuntu-server-focal",
            "sku": "20_04-lts-gen2",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2021-11-01",
      "name": "[concat(parameters('vmName'), '/installEMR')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "script": "[base64(concat('#!/bin/bash\n',
            '# EMR Training System - Azure Installation Script\n',
            'set -e\n',
            '\n',
            'echo \"🏥 Starting EMR Training System deployment...\"\n',
            '\n',
            '# Update system\n',
            'apt-get update\n',
            'apt-get upgrade -y\n',
            '\n',
            '# Install Docker\n',
            'apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n',
            'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n',
            'add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\"\n',
            'apt-get update\n',
            'apt-get install -y docker-ce docker-ce-cli containerd.io\n',
            '\n',
            '# Install Docker Compose\n',
            'curl -L \"https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n',
            'chmod +x /usr/local/bin/docker-compose\n',
            '\n',
            '# Install git\n',
            'apt-get install -y git\n',
            '\n',
            '# Create app directory\n',
            'mkdir -p /opt/emr-system\n',
            'cd /opt/emr-system\n',
            '\n',
            '# Clone repository\n',
            'git clone https://github.com/ultraub/MedGenEMR.git .\n',
            '\n',
            '# Set environment variables\n',
            'echo \"PATIENT_COUNT=', parameters('patientCount'), '\" > .env\n',
            'echo \"SKIP_SYNTHEA=false\" >> .env\n',
            'echo \"SKIP_IMPORT=false\" >> .env\n',
            '\n',
            '# Build and start the application\n',
            'docker-compose -f docker-compose.standalone.yml up -d\n',
            '\n',
            '# Setup auto-start on reboot\n',
            'cat > /etc/systemd/system/emr-system.service << EOF\n',
            '[Unit]\n',
            'Description=EMR Training System\n',
            'After=docker.service\n',
            'Requires=docker.service\n',
            '\n',
            '[Service]\n',
            'Type=oneshot\n',
            'RemainAfterExit=true\n',
            'WorkingDirectory=/opt/emr-system\n',
            'ExecStart=/usr/local/bin/docker-compose -f docker-compose.standalone.yml up -d\n',
            'ExecStop=/usr/local/bin/docker-compose -f docker-compose.standalone.yml down\n',
            '\n',
            '[Install]\n',
            'WantedBy=multi-user.target\n',
            'EOF\n',
            '\n',
            'systemctl daemon-reload\n',
            'systemctl enable emr-system\n',
            '\n',
            'echo \"✓ EMR Training System deployment complete!\"\n',
            'echo \"Access the system at http://$(curl -s ifconfig.me)\"\n'
          ))]"
        }
      }
    }
  ],
  "outputs": {
    "publicIPAddress": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressName')).ipAddress]"
    },
    "fqdn": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
    },
    "sshCommand": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('publicIPAddressName')).dnsSettings.fqdn)]"
    },
    "emrSystemURL": {
      "type": "string",
      "value": "[concat('http://', reference(variables('publicIPAddressName')).dnsSettings.fqdn)]"
    }
  }
}