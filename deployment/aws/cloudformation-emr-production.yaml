AWSTemplateFormatVersion: '2010-09-09'
Description: 'Teaching EMR System - Production Deployment with 100+ Patients'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
    ConstraintDescription: Must be a valid EC2 instance type

  KeyPairName:
    Description: Name of an existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  AllowedIPRange:
    Description: IP address range that can access the EMR system
    Type: String
    Default: 0.0.0.0/0
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range

  DeploymentProfile:
    Description: Deployment profile (controls patient count and features)
    Type: String
    Default: production
    AllowedValues:
      - local_dev
      - production
      - cloud
    ConstraintDescription: Must be a valid deployment profile

  VolumeSize:
    Description: Size of EBS volume in GB
    Type: Number
    Default: 100
    MinValue: 30
    MaxValue: 500

  EnableHTTPS:
    Description: Enable HTTPS with SSL certificate
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  DomainName:
    Description: Domain name for the EMR system (required if HTTPS is enabled)
    Type: String
    Default: ''

Conditions:
  UseHTTPS: !Equals [!Ref EnableHTTPS, 'true']
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c02fb55956c7d316  # Amazon Linux 2
    us-west-2:
      AMI: ami-0f1a5f5ada0e0c6e7
    eu-west-1:
      AMI: ami-0d1bf5b68307103c2
    eu-central-1:
      AMI: ami-0a261c0e0317b44e8
    ap-southeast-1:
      AMI: ami-0dc5785603ad4ff54
    ap-northeast-1:
      AMI: ami-0bba69335379e17f8

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # Security Group
  EMRSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EMR Training System
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedIPRange
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AllowedIPRange
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIPRange
          Description: SSH access
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SecurityGroup

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-dicom-storage/*'
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-dicom-storage'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # S3 Bucket for DICOM Storage
  DICOMStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-dicom-storage'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DICOM-Storage

  # EC2 Instance
  EMRInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EMRSecurityGroup
      SubnetId: !Ref PublicSubnet
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          
          # Update system
          yum update -y
          
          # Install dependencies
          yum install -y docker git python3 python3-pip java-11-amazon-corretto-headless nginx
          
          # Install docker-compose
          curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Start Docker service
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install CloudWatch agent
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm
          
          # Clone repository
          cd /home/ec2-user
          git clone https://github.com/your-repo/emr-system.git EMR || {
            # If clone fails, create directory structure
            mkdir -p EMR
            cd EMR
            # Download deployment files from S3 or create minimal structure
            echo "Repository clone failed, creating minimal structure"
          }
          
          cd EMR
          
          # Create deployment configuration
          cat > deployment.config.json <<EOF
          {
            "deployment_profiles": {
              "production": {
                "patient_count": 100,
                "provider_count": 20,
                "enable_clinical_notes": true,
                "enable_imaging": true,
                "enable_labs_with_ranges": true,
                "enable_cds_hooks": true,
                "enable_fhir": true,
                "database_type": "sqlite",
                "s3_bucket": "${AWS::StackName}-dicom-storage"
              }
            }
          }
          EOF
          
          # Create environment file
          cat > .env <<EOF
          DEPLOYMENT_PROFILE=${DeploymentProfile}
          DATABASE_URL=sqlite:///./data/emr.db
          SECRET_KEY=$(openssl rand -hex 32)
          JWT_ALGORITHM=HS256
          JWT_EXPIRATION_HOURS=8
          CORS_ORIGINS=*
          AWS_REGION=${AWS::Region}
          S3_BUCKET=${AWS::StackName}-dicom-storage
          BACKEND_PORT=8000
          FRONTEND_PORT=80
          EOF
          
          # Create docker-compose override for AWS
          cat > docker-compose.override.yml <<EOF
          version: '3.8'
          services:
            backend:
              environment:
                - AWS_REGION=${AWS::Region}
                - S3_BUCKET=${AWS::StackName}-dicom-storage
              volumes:
                - /home/ec2-user/.aws:/root/.aws:ro
            frontend:
              ports:
                - "80:80"
                - "443:443"
          EOF
          
          # Setup nginx for HTTPS if enabled
          if [ "${EnableHTTPS}" == "true" ] && [ -n "${DomainName}" ]; then
            # Install certbot
            amazon-linux-extras install epel -y
            yum install -y certbot python3-certbot-nginx
            
            # Configure nginx
            cat > /etc/nginx/conf.d/emr.conf <<NGINX
          server {
              listen 80;
              server_name ${DomainName};
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }
              location / {
                  return 301 https://\$server_name\$request_uri;
              }
          }
          NGINX
            
            # Start nginx temporarily for cert generation
            systemctl start nginx
            
            # Generate certificate
            certbot certonly --nginx -d ${DomainName} --non-interactive --agree-tos --email admin@${DomainName} || true
          fi
          
          # Build and start services
          docker-compose -f docker-compose.deployment.yml up -d
          
          # Wait for backend to be healthy
          echo "Waiting for backend to start..."
          sleep 30
          
          # Initialize data with production profile
          docker-compose -f docker-compose.deployment.yml run --rm data-init
          
          # Setup CloudWatch logging
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<CWCONFIG
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/home/ec2-user/EMR/backend/logs/*.log",
                      "log_group_name": "/aws/ec2/emr-system",
                      "log_stream_name": "{instance_id}/backend"
                    },
                    {
                      "file_path": "/var/log/nginx/*.log",
                      "log_group_name": "/aws/ec2/emr-system",
                      "log_stream_name": "{instance_id}/nginx"
                    }
                  ]
                }
              }
            }
          }
          CWCONFIG
          
          # Start CloudWatch agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config \
            -m ec2 \
            -s \
            -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          
          # Set up automatic backups
          cat > /home/ec2-user/backup.sh <<'BACKUP'
          #!/bin/bash
          BACKUP_DIR="/home/ec2-user/backups"
          mkdir -p $BACKUP_DIR
          DATE=$(date +%Y%m%d_%H%M%S)
          
          # Backup database
          docker exec emr-backend sqlite3 /app/data/emr.db ".backup /app/data/backup_$DATE.db"
          
          # Compress and upload to S3
          tar -czf $BACKUP_DIR/emr_backup_$DATE.tar.gz -C /home/ec2-user/EMR/backend/data .
          aws s3 cp $BACKUP_DIR/emr_backup_$DATE.tar.gz s3://${AWS::StackName}-dicom-storage/backups/
          
          # Clean up old local backups (keep last 7 days)
          find $BACKUP_DIR -name "emr_backup_*.tar.gz" -mtime +7 -delete
          BACKUP
          
          chmod +x /home/ec2-user/backup.sh
          
          # Schedule daily backups
          echo "0 2 * * * /home/ec2-user/backup.sh" | crontab -
          
          # Signal completion
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EMRInstance --region ${AWS::Region}
          
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Instance

  # Elastic IP
  EMRElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EIP

  EMRElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EMRInstance
      EIP: !Ref EMRElasticIP

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/emr-system
      RetentionInDays: 30

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Triggers when CPU utilization is too high
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref EMRInstance

  DiskSpaceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Triggers when disk space is running low
      MetricName: disk_used_percent
      Namespace: CWAgent
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref EMRInstance
        - Name: path
          Value: /

Outputs:
  EMRSystemURL:
    Description: URL to access the EMR system
    Value: !If
      - UseHTTPS
      - !Sub 'https://${DomainName}'
      - !Sub 'http://${EMRElasticIP}'

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${EMRElasticIP}'

  InstanceId:
    Description: Instance ID
    Value: !Ref EMRInstance

  S3BucketName:
    Description: S3 bucket for DICOM storage
    Value: !Ref DICOMStorageBucket

  BackupCommand:
    Description: Command to manually trigger backup
    Value: 'sudo docker exec emr-backend python scripts/backup_database.py'

  LogGroupName:
    Description: CloudWatch Log Group
    Value: !Ref LogGroup