/**
 * Quick Result Note Component
 * Provides quick note generation from lab/diagnostic results
 */

import React, { useState, useCallback } from 'react';
import {
  Box,
  Paper,
  Typography,
  Button,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Chip,
  Stack,
  Alert,
  Tooltip,
  CircularProgress,
  Collapse,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Divider
} from '@mui/material';
import {
  NoteAdd as CreateNoteIcon,
  Speed as QuickIcon,
  Preview as PreviewIcon,
  Edit as EditIcon,
  Save as SaveIcon,
  Close as CloseIcon,
  Warning as WarningIcon,
  Error as ErrorIcon,
  CheckCircle as CheckIcon,
  Assignment as TemplateIcon,
  Schedule as UrgentIcon
} from '@mui/icons-material';

import { resultDocumentationService } from '../../../services/resultDocumentationService';
import { useClinicalWorkflow } from '../../../contexts/ClinicalWorkflowContext';

const QuickResultNote = ({ 
  result, 
  patientId, 
  encounterId,
  onNoteCreated,
  variant = 'button', // 'button', 'inline', 'dialog'
  disabled = false 
}) => {
  const [open, setOpen] = useState(false);
  const [noteData, setNoteData] = useState(null);
  const [editableContent, setEditableContent] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [step, setStep] = useState('generate'); // 'generate', 'preview', 'edit', 'saving'
  const [error, setError] = useState(null);
  const { publish } = useClinicalWorkflow();

  const handleGenerateNote = useCallback(async () => {
    setIsGenerating(true);
    setError(null);
    
    try {
      const generatedNote = await resultDocumentationService.generateQuickNote(
        result, 
        patientId, 
        encounterId
      );
      
      setNoteData(generatedNote);
      setEditableContent(generatedNote.content);
      setStep('preview');
      
    } catch (error) {
      setError('Failed to generate note. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  }, [result, patientId, encounterId]);

  const handleSaveNote = useCallback(async () => {
    if (!noteData) return;
    
    setIsSaving(true);
    setError(null);
    
    try {
      // Update note content with edits
      const updatedNoteData = {
        ...noteData,
        content: editableContent,
        metadata: {
          ...noteData.metadata,
          lastModified: new Date().toISOString(),
          userEdited: editableContent !== noteData.content
        }
      };

      // Create the documentation
      const documentRef = await resultDocumentationService.createResultDocumentation(updatedNoteData);
      
      // Publish workflow event
      await publish('RESULT_DOCUMENTATION_CREATED', {
        patientId,
        encounterId,
        resultId: result.id,
        documentId: documentRef.id,
        resultType: noteData.resultType,
        urgency: noteData.urgency,
        autoGenerated: true
      });

      // Call parent handler
      if (onNoteCreated) {
        onNoteCreated({
          documentRef,
          noteData: updatedNoteData,
          result
        });
      }

      setStep('saving');
      
      // Close dialog after short delay
      setTimeout(() => {
        setOpen(false);
        setStep('generate');
        setNoteData(null);
        setEditableContent('');
      }, 1500);

    } catch (error) {
      setError('Failed to save note. Please try again.');
    } finally {
      setIsSaving(false);
    }
  }, [noteData, editableContent, patientId, encounterId, result, publish, onNoteCreated]);

  const handleClose = useCallback(() => {
    setOpen(false);
    setStep('generate');
    setNoteData(null);
    setEditableContent('');
    setError(null);
  }, []);

  const getUrgencyColor = (urgency) => {
    switch (urgency) {
      case 'critical': return 'error';
      case 'warning': return 'warning';
      case 'routine': return 'info';
      default: return 'default';
    }
  };

  const getUrgencyIcon = (urgency) => {
    switch (urgency) {
      case 'critical': return <ErrorIcon color="error" />;
      case 'warning': return <WarningIcon color="warning" />;
      case 'routine': return <CheckIcon color="info" />;
      default: return <QuickIcon />;
    }
  };

  const renderTriggerButton = () => {
    switch (variant) {
      case 'inline':
        return (
          <Button
            size="small"
            startIcon={<CreateNoteIcon />}
            onClick={() => setOpen(true)}
            disabled={disabled}
            variant="outlined"
            color="primary"
          >
            Quick Note
          </Button>
        );
      
      case 'button':
      default:
        return (
          <Tooltip title="Generate quick documentation note from this result">
            <IconButton
              size="small"
              onClick={() => setOpen(true)}
              disabled={disabled}
              color="primary"
            >
              <QuickIcon />
            </IconButton>
          </Tooltip>
        );
    }
  };

  return (
    <>
      {renderTriggerButton()}
      
      <Dialog
        open={open}
        onClose={handleClose}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: { minHeight: '60vh' }
        }}
      >
        <DialogTitle>
          <Stack direction="row" alignItems="center" spacing={2}>
            <CreateNoteIcon color="primary" />
            <Typography variant="h6" sx={{ flexGrow: 1 }}>
              Quick Result Documentation
            </Typography>
            {noteData && (
              <Chip
                icon={getUrgencyIcon(noteData.urgency)}
                label={noteData.urgency.toUpperCase()}
                size="small"
                color={getUrgencyColor(noteData.urgency)}
                variant="outlined"
              />
            )}
            <IconButton size="small" onClick={handleClose}>
              <CloseIcon />
            </IconButton>
          </Stack>
        </DialogTitle>

        <DialogContent>
          {error && (
            <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
              {error}
            </Alert>
          )}

          {/* Step 1: Generate Note */}
          {step === 'generate' && (
            <Box>
              <Alert severity="info" sx={{ mb: 3 }}>
                <Typography variant="subtitle2" gutterBottom>
                  Auto-Generate Documentation Note
                </Typography>
                <Typography variant="body2">
                  This will create a clinical note based on the selected result. 
                  The note will include result summary, interpretation, and suggested plan.
                  You can review and edit the generated content before saving.
                </Typography>
              </Alert>

              <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                  Result to Document:
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  <strong>Test:</strong> {result.code?.text || 'Unknown test'}
                </Typography>
                {result.valueQuantity && (
                  <Typography variant="body2" sx={{ mb: 1 }}>
                    <strong>Result:</strong> {result.valueQuantity.value} {result.valueQuantity.unit || ''}
                  </Typography>
                )}
                <Typography variant="body2">
                  <strong>Date:</strong> {result.effectiveDateTime ? 
                    new Date(result.effectiveDateTime).toLocaleDateString() : 'No date'}
                </Typography>
              </Paper>

              {isGenerating && (
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', py: 4 }}>
                  <CircularProgress sx={{ mr: 2 }} />
                  <Typography>Generating documentation note...</Typography>
                </Box>
              )}
            </Box>
          )}

          {/* Step 2: Preview Generated Note */}
          {step === 'preview' && noteData && (
            <Box>
              <Alert severity="success" sx={{ mb: 2 }}>
                <Typography variant="subtitle2">
                  Note Generated Successfully
                </Typography>
                <Typography variant="body2">
                  Review the generated content below. You can edit it before saving.
                </Typography>
              </Alert>

              <Stack direction="row" spacing={2} sx={{ mb: 2 }}>
                <Chip
                  icon={<TemplateIcon />}
                  label={noteData.template.title}
                  size="small"
                  variant="outlined"
                  color="primary"
                />
                <Chip
                  label={`${noteData.suggestedActions.length} recommendations`}
                  size="small"
                  variant="outlined"
                />
              </Stack>

              <Paper
                variant="outlined"
                sx={{
                  p: 2,
                  maxHeight: 400,
                  overflow: 'auto',
                  backgroundColor: 'grey.50',
                  fontFamily: 'monospace',
                  whiteSpace: 'pre-wrap',
                  fontSize: '0.875rem'
                }}
              >
                {noteData.content}
              </Paper>

              {noteData.suggestedActions.length > 0 && (
                <Box sx={{ mt: 2 }}>
                  <Typography variant="subtitle2" gutterBottom>
                    Suggested Actions:
                  </Typography>
                  <List dense>
                    {noteData.suggestedActions.map((action, index) => (
                      <ListItem key={index}>
                        <ListItemIcon>
                          <Chip
                            size="small"
                            label={action.priority}
                            color={action.priority === 'critical' ? 'error' : 
                                   action.priority === 'high' ? 'warning' : 'default'}
                            variant="outlined"
                          />
                        </ListItemIcon>
                        <ListItemText
                          primary={action.description}
                          secondary={action.type}
                        />
                      </ListItem>
                    ))}
                  </List>
                </Box>
              )}
            </Box>
          )}

          {/* Step 3: Edit Note */}
          {step === 'edit' && (
            <Box>
              <Typography variant="subtitle2" gutterBottom>
                Edit Note Content:
              </Typography>
              <TextField
                multiline
                rows={20}
                fullWidth
                value={editableContent}
                onChange={(e) => setEditableContent(e.target.value)}
                variant="outlined"
                sx={{
                  '& .MuiInputBase-input': {
                    fontFamily: 'monospace',
                    fontSize: '0.875rem'
                  }
                }}
              />
            </Box>
          )}

          {/* Step 4: Saving */}
          {step === 'saving' && (
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', py: 4 }}>
              <CheckIcon color="success" sx={{ fontSize: 48, mr: 2 }} />
              <Typography variant="h6" color="success.main">
                Note Saved Successfully!
              </Typography>
            </Box>
          )}
        </DialogContent>

        <DialogActions>
          {step === 'generate' && (
            <>
              <Button onClick={handleClose} disabled={isGenerating}>
                Cancel
              </Button>
              <Button
                variant="contained"
                startIcon={isGenerating ? <CircularProgress size={16} /> : <CreateNoteIcon />}
                onClick={handleGenerateNote}
                disabled={isGenerating}
              >
                {isGenerating ? 'Generating...' : 'Generate Note'}
              </Button>
            </>
          )}

          {step === 'preview' && (
            <>
              <Button onClick={handleClose}>
                Cancel
              </Button>
              <Button
                startIcon={<EditIcon />}
                onClick={() => setStep('edit')}
              >
                Edit Content
              </Button>
              <Button
                variant="contained"
                startIcon={<SaveIcon />}
                onClick={handleSaveNote}
                disabled={isSaving}
              >
                Save Note
              </Button>
            </>
          )}

          {step === 'edit' && (
            <>
              <Button onClick={() => setStep('preview')}>
                Back to Preview
              </Button>
              <Button
                variant="contained"
                startIcon={isSaving ? <CircularProgress size={16} /> : <SaveIcon />}
                onClick={handleSaveNote}
                disabled={isSaving}
              >
                {isSaving ? 'Saving...' : 'Save Note'}
              </Button>
            </>
          )}

          {step === 'saving' && (
            <Button variant="contained" onClick={handleClose}>
              Done
            </Button>
          )}
        </DialogActions>
      </Dialog>
    </>
  );
};

export default QuickResultNote;