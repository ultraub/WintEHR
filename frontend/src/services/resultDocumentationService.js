/**
 * Result Documentation Service
 * Quick note generation from order results (lab, diagnostic, etc.)
 */

import { fhirClient } from '../core/fhir/services/fhirClient';

export class ResultDocumentationService {
  constructor() {
    this.resultTemplates = new Map();
    this.abnormalResultCache = new Map();
  }

  /**
   * Generate quick documentation note from a result
   * @param {Object} result - FHIR Observation or DiagnosticReport
   * @param {string} patientId - Patient ID
   * @param {string} encounterId - Encounter ID (optional)
   * @param {Object} options - Additional options
   * @returns {Object} Generated note data
   */
  async generateQuickNote(result, patientId, encounterId = null, options = {}) {
    try {
      const resultType = this.categorizeResult(result);
      const template = await this.getTemplateForResult(resultType, result);
      const noteContent = await this.generateNoteContent(result, template, patientId);

      return {
        id: `quick-note-${result.id}-${Date.now()}`,
        type: 'result-documentation',
        resultId: result.id,
        resultType: resultType,
        template: template,
        title: this.generateNoteTitle(result, resultType),
        content: noteContent,
        urgency: this.assessResultUrgency(result),
        suggestedActions: this.getSuggestedActions(result, resultType),
        linkedResources: this.getLinkedResources(result),
        metadata: {
          patientId,
          encounterId,
          resultDate: result.effectiveDateTime || result.issued,
          generatedAt: new Date().toISOString(),
          autoGenerated: true,
          source: 'result-documentation-service'
        }
      };

    } catch (error) {
      throw error;
    }
  }

  /**
   * Generate multiple quick notes from a batch of results
   * @param {Array} results - Array of FHIR resources
   * @param {string} patientId - Patient ID
   * @param {string} encounterId - Encounter ID (optional)
   * @returns {Array} Array of generated note data
   */
  async generateBatchNotes(results, patientId, encounterId = null) {
    const notes = [];
    
    for (const result of results) {
      try {
        const note = await this.generateQuickNote(result, patientId, encounterId);
        notes.push(note);
      } catch (error) {
        // Continue with other results
      }
    }

    return notes;
  }

  /**
   * Create and save a documentation note from result
   * @param {Object} noteData - Generated note data
   * @returns {Object} Created DocumentReference
   */
  async createResultDocumentation(noteData) {
    try {
      const documentRef = {
        resourceType: 'DocumentReference',
        id: `doc-result-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        status: 'current',
        type: {
          coding: [{
            system: 'http://loinc.org',
            code: this.getLoincCodeForResultType(noteData.resultType),
            display: this.getDisplayForResultType(noteData.resultType)
          }]
        },
        category: [{
          coding: [{
            system: 'http://hl7.org/fhir/us/core/CodeSystem/us-core-documentreference-category',
            code: 'clinical-note',
            display: 'Clinical Note'
          }]
        }],
        subject: {
          reference: `Patient/${noteData.metadata.patientId}`,
          display: 'Patient'
        },
        date: new Date().toISOString(),
        author: [{
          reference: 'Practitioner/current-user',
          display: 'Current User'
        }],
        description: noteData.title,
        content: [{
          attachment: {
            contentType: 'text/plain',
            data: btoa(noteData.content) // Base64 encode content
          }
        }],
        context: {
          // Link to the result
          related: [{
            reference: `${noteData.linkedResources.primary.resourceType}/${noteData.resultId}`,
            display: 'Related Result'
          }],
          encounter: noteData.metadata.encounterId ? [{
            reference: `Encounter/${noteData.metadata.encounterId}`
          }] : undefined
        },
        // Custom extensions for result linking
        extension: [
          {
            url: 'http://wintehr.com/fhir/StructureDefinition/linked-result',
            valueReference: {
              reference: `${noteData.linkedResources.primary.resourceType}/${noteData.resultId}`,
              display: 'Linked Result'
            }
          },
          {
            url: 'http://wintehr.com/fhir/StructureDefinition/auto-generated',
            valueBoolean: true
          },
          {
            url: 'http://wintehr.com/fhir/StructureDefinition/result-urgency',
            valueString: noteData.urgency
          }
        ]
      };

      const created = await fhirClient.create('DocumentReference', documentRef);
      return created;

    } catch (error) {
      throw error;
    }
  }

  /**
   * Categorize the type of result
   * @param {Object} result - FHIR resource
   * @returns {string} Result category
   */
  categorizeResult(result) {
    if (result.resourceType === 'DiagnosticReport') {
      return this.categorizeDiagnosticReport(result);
    } else if (result.resourceType === 'Observation') {
      return this.categorizeObservation(result);
    }
    return 'unknown';
  }

  categorizeDiagnosticReport(report) {
    const code = report.code?.coding?.[0]?.code;
    const text = report.code?.text?.toLowerCase() || '';
    
    if (text.includes('chest') || text.includes('x-ray') || code?.includes('X-ray')) {
      return 'imaging-chest';
    }
    if (text.includes('ct') || text.includes('computed tomography')) {
      return 'imaging-ct';
    }
    if (text.includes('mri') || text.includes('magnetic resonance')) {
      return 'imaging-mri';
    }
    if (text.includes('ultrasound') || text.includes('echo')) {
      return 'imaging-ultrasound';
    }
    if (text.includes('pathology') || text.includes('biopsy')) {
      return 'pathology';
    }
    
    return 'diagnostic-other';
  }

  categorizeObservation(observation) {
    const category = observation.category?.[0]?.coding?.[0]?.code;
    const code = observation.code?.coding?.[0]?.code;
    const text = observation.code?.text?.toLowerCase() || '';

    if (category === 'vital-signs') {
      return 'vital-signs';
    }
    if (category === 'laboratory') {
      return this.categorizeLabResult(observation);
    }
    if (text.includes('ekg') || text.includes('ecg') || code?.includes('EKG')) {
      return 'cardiac-study';
    }
    
    return 'observation-other';
  }

  categorizeLabResult(observation) {
    const code = observation.code?.coding?.[0]?.code;
    const text = observation.code?.text?.toLowerCase() || '';

    // Common lab panels
    if (code?.includes('CBC') || text.includes('complete blood count')) {
      return 'lab-hematology';
    }
    if (code?.includes('BMP') || code?.includes('CMP') || text.includes('metabolic panel')) {
      return 'lab-chemistry';
    }
    if (text.includes('lipid') || text.includes('cholesterol')) {
      return 'lab-lipids';
    }
    if (text.includes('hemoglobin a1c') || text.includes('hba1c') || code === '4548-4') {
      return 'lab-diabetes';
    }
    if (text.includes('thyroid') || text.includes('tsh') || text.includes('t4')) {
      return 'lab-thyroid';
    }
    if (text.includes('liver') || text.includes('alt') || text.includes('ast')) {
      return 'lab-liver';
    }
    if (text.includes('kidney') || text.includes('creatinine') || text.includes('bun')) {
      return 'lab-renal';
    }
    
    return 'lab-other';
  }

  /**
   * Get appropriate template for result type
   * @param {string} resultType - Result category
   * @param {Object} result - FHIR resource
   * @returns {Object} Template configuration
   */
  async getTemplateForResult(resultType, result) {
    const isAbnormal = this.isResultAbnormal(result);
    const isCritical = this.isResultCritical(result);

    // Base template structure
    const baseTemplate = {
      id: `result-${resultType}`,
      resultType: resultType,
      sections: ['result-summary', 'interpretation', 'plan'],
      urgency: isCritical ? 'critical' : (isAbnormal ? 'warning' : 'routine')
    };

    // Customize template based on result type
    switch (resultType) {
      case 'lab-diabetes':
        return {
          ...baseTemplate,
          title: 'Diabetes Lab Results Review',
          sections: ['result-summary', 'diabetes-interpretation', 'diabetes-plan'],
          specialSections: {
            'diabetes-interpretation': this.getDiabetesInterpretationTemplate(result),
            'diabetes-plan': this.getDiabetesPlanTemplate(result)
          }
        };

      case 'lab-lipids':
        return {
          ...baseTemplate,
          title: 'Lipid Panel Results Review',
          sections: ['result-summary', 'lipid-interpretation', 'cardiovascular-plan'],
          specialSections: {
            'lipid-interpretation': this.getLipidInterpretationTemplate(result),
            'cardiovascular-plan': this.getCardiovascularPlanTemplate(result)
          }
        };

      case 'imaging-chest':
        return {
          ...baseTemplate,
          title: 'Chest Imaging Results Review',
          sections: ['result-summary', 'imaging-findings', 'clinical-correlation'],
          specialSections: {
            'imaging-findings': this.getImagingFindingsTemplate(result),
            'clinical-correlation': this.getClinicalCorrelationTemplate(result)
          }
        };

      case 'lab-hematology':
        return {
          ...baseTemplate,
          title: 'Hematology Results Review',
          sections: ['result-summary', 'hematology-interpretation', 'hematology-plan']
        };

      case 'vital-signs':
        return {
          ...baseTemplate,
          title: 'Vital Signs Documentation',
          sections: ['vital-summary', 'clinical-significance', 'monitoring-plan']
        };

      default:
        return {
          ...baseTemplate,
          title: 'Lab/Diagnostic Results Review',
          sections: ['result-summary', 'interpretation', 'plan']
        };
    }
  }

  /**
   * Generate note content based on template and result
   * @param {Object} result - FHIR resource
   * @param {Object} template - Template configuration
   * @param {string} patientId - Patient ID
   * @returns {string} Generated note content
   */
  async generateNoteContent(result, template, patientId) {
    let content = `${template.title}\n`;
    content += `Date: ${new Date().toLocaleDateString()}\n`;
    content += `Generated from result: ${this.getResultDescription(result)}\n\n`;

    for (const sectionKey of template.sections) {
      const sectionContent = await this.generateSectionContent(sectionKey, result, template, patientId);
      if (sectionContent) {
        content += sectionContent + '\n\n';
      }
    }

    // Add footer
    content += '\n---\n';
    content += 'Note: This documentation was auto-generated from clinical results.\n';
    content += 'Please review and modify as needed for accuracy and completeness.\n';

    return content;
  }

  /**
   * Generate content for a specific section
   * @param {string} sectionKey - Section identifier
   * @param {Object} result - FHIR resource
   * @param {Object} template - Template configuration
   * @param {string} patientId - Patient ID
   * @returns {string} Section content
   */
  async generateSectionContent(sectionKey, result, template, patientId) {
    switch (sectionKey) {
      case 'result-summary':
        return this.generateResultSummary(result);
      
      case 'interpretation':
        return this.generateInterpretation(result);
      
      case 'plan':
        return this.generatePlan(result);
      
      case 'diabetes-interpretation':
        return this.generateDiabetesInterpretation(result);
      
      case 'diabetes-plan':
        return this.generateDiabetesPlan(result);
      
      case 'lipid-interpretation':
        return this.generateLipidInterpretation(result);
      
      case 'cardiovascular-plan':
        return this.generateCardiovascularPlan(result);
      
      case 'imaging-findings':
        return this.generateImagingFindings(result);
      
      case 'clinical-correlation':
        return this.generateClinicalCorrelation(result);
      
      case 'vital-summary':
        return this.generateVitalSummary(result);
      
      case 'clinical-significance':
        return this.generateClinicalSignificance(result);
      
      case 'monitoring-plan':
        return this.generateMonitoringPlan(result);
      
      default:
        return '';
    }
  }

  // Section generation methods
  generateResultSummary(result) {
    let summary = 'RESULT SUMMARY:\n';
    
    if (result.resourceType === 'Observation') {
      const testName = result.code?.text || result.code?.coding?.[0]?.display || 'Lab Test';
      const value = result.valueQuantity ? 
        `${result.valueQuantity.value} ${result.valueQuantity.unit || ''}` :
        result.valueString || 'No value recorded';
      
      summary += `Test: ${testName}\n`;
      summary += `Result: ${value}\n`;
      
      if (result.referenceRange?.[0]) {
        const range = result.referenceRange[0];
        summary += `Reference Range: ${range.low?.value || ''}-${range.high?.value || ''} ${range.low?.unit || ''}\n`;
      }
      
      summary += `Status: ${this.getResultStatusText(result)}\n`;
      summary += `Date: ${result.effectiveDateTime ? new Date(result.effectiveDateTime).toLocaleDateString() : 'No date'}\n`;
    } else if (result.resourceType === 'DiagnosticReport') {
      summary += `Study: ${result.code?.text || 'Diagnostic Study'}\n`;
      summary += `Status: ${result.status || 'Unknown'}\n`;
      summary += `Date: ${result.effectiveDateTime ? new Date(result.effectiveDateTime).toLocaleDateString() : 'No date'}\n`;
      
      if (result.conclusion) {
        summary += `Impression: ${result.conclusion}\n`;
      }
    }

    return summary;
  }

  generateInterpretation(result) {
    let interpretation = 'INTERPRETATION:\n';
    
    if (this.isResultCritical(result)) {
      interpretation += '⚠️ CRITICAL RESULT - Requires immediate attention\n\n';
    } else if (this.isResultAbnormal(result)) {
      interpretation += '⚠️ ABNORMAL RESULT - Requires review\n\n';
    } else {
      interpretation += '✓ Result within normal limits\n\n';
    }

    if (result.interpretation?.[0]?.text) {
      interpretation += `Clinical Interpretation: ${result.interpretation[0].text}\n`;
    }

    // Add context-specific interpretation
    const resultType = this.categorizeResult(result);
    switch (resultType) {
      case 'lab-diabetes':
        interpretation += this.generateDiabetesInterpretation(result);
        break;
      case 'lab-lipids':
        interpretation += this.generateLipidInterpretation(result);
        break;
      case 'vital-signs':
        interpretation += this.generateVitalSignsInterpretation(result);
        break;
      default:
        interpretation += 'Clinical correlation recommended.\n';
    }

    return interpretation;
  }

  generatePlan(result) {
    let plan = 'PLAN:\n';
    
    if (this.isResultCritical(result)) {
      plan += '1. Immediate follow-up required\n';
      plan += '2. Consider repeat testing if clinically indicated\n';
      plan += '3. Patient notification and counseling\n';
      plan += '4. Document discussion and plan\n';
    } else if (this.isResultAbnormal(result)) {
      plan += '1. Review result in clinical context\n';
      plan += '2. Consider repeat testing or additional workup\n';
      plan += '3. Patient education as appropriate\n';
      plan += '4. Follow-up as clinically indicated\n';
    } else {
      plan += '1. Result reviewed and noted\n';
      plan += '2. Continue current management\n';
      plan += '3. Routine follow-up as scheduled\n';
    }

    // Add result-specific recommendations
    const suggestedActions = this.getSuggestedActions(result, this.categorizeResult(result));
    if (suggestedActions.length > 0) {
      plan += '\nAdditional Recommendations:\n';
      suggestedActions.forEach((action, index) => {
        plan += `${index + 5}. ${action.description}\n`;
      });
    }

    return plan;
  }

  generateDiabetesInterpretation(result) {
    if (result.code?.coding?.[0]?.code === '4548-4') { // HbA1c
      const value = result.valueQuantity?.value;
      if (value) {
        if (value < 5.7) {
          return 'HbA1c indicates normal glucose metabolism.';
        } else if (value < 6.5) {
          return 'HbA1c indicates prediabetes. Lifestyle interventions recommended.';
        } else {
          return 'HbA1c indicates diabetes. Medication management and monitoring required.';
        }
      }
    }
    return 'Diabetes-related result requires clinical correlation.';
  }

  generateDiabetesPlan(result) {
    let plan = 'DIABETES MANAGEMENT PLAN:\n';
    
    if (result.code?.coding?.[0]?.code === '4548-4') { // HbA1c
      const value = result.valueQuantity?.value;
      if (value >= 6.5) {
        plan += '1. Continue/optimize diabetes medications\n';
        plan += '2. Diabetes education and counseling\n';
        plan += '3. Lifestyle modifications (diet, exercise)\n';
        plan += '4. Repeat HbA1c in 3 months\n';
        plan += '5. Screening for diabetes complications\n';
      } else if (value >= 5.7) {
        plan += '1. Lifestyle interventions (diet, exercise, weight loss)\n';
        plan += '2. Diabetes prevention education\n';
        plan += '3. Repeat HbA1c in 6 months\n';
        plan += '4. Consider metformin if high risk\n';
      }
    }
    
    return plan;
  }

  generateLipidInterpretation(result) {
    return 'Lipid panel results require assessment of cardiovascular risk factors.';
  }

  generateCardiovascularPlan(result) {
    return 'CARDIOVASCULAR RISK MANAGEMENT:\n1. Assess overall cardiovascular risk\n2. Consider statin therapy if indicated\n3. Lifestyle modifications\n4. Repeat lipids in 6-12 weeks if therapy initiated';
  }

  generateImagingFindings(result) {
    let findings = 'IMAGING FINDINGS:\n';
    
    if (result.conclusion) {
      findings += `Impression: ${result.conclusion}\n`;
    }
    
    if (result.presentedForm?.[0]?.data) {
      findings += 'Detailed report available in imaging system.\n';
    }
    
    return findings + 'Clinical correlation with physical examination and history recommended.';
  }

  generateClinicalCorrelation(result) {
    return 'CLINICAL CORRELATION:\nImaging findings should be correlated with patient symptoms, physical examination, and clinical history for appropriate management planning.';
  }

  generateVitalSummary(result) {
    const vitalName = result.code?.text || 'Vital Sign';
    const value = result.valueQuantity ? 
      `${result.valueQuantity.value} ${result.valueQuantity.unit || ''}` :
      'No value recorded';
    
    return `VITAL SIGNS DOCUMENTATION:\n${vitalName}: ${value}\nClinical significance assessed in context of patient presentation.`;
  }

  generateClinicalSignificance(result) {
    if (this.isResultAbnormal(result)) {
      return 'CLINICAL SIGNIFICANCE:\nAbnormal vital sign requires assessment and intervention as clinically appropriate.';
    }
    return 'CLINICAL SIGNIFICANCE:\nVital signs within acceptable range for patient.';
  }

  generateMonitoringPlan(result) {
    return 'MONITORING PLAN:\n1. Continue routine vital sign monitoring\n2. Adjust frequency based on clinical status\n3. Document trends and changes\n4. Intervene as clinically indicated';
  }

  // Helper methods
  isResultAbnormal(result) {
    // Check interpretation
    if (result.interpretation) {
      const interpretation = result.interpretation[0]?.coding?.[0]?.code;
      return ['A', 'AA', 'HH', 'LL', 'H', 'L'].includes(interpretation);
    }
    
    // Check against reference ranges
    if (result.valueQuantity && result.referenceRange?.[0]) {
      const value = result.valueQuantity.value;
      const range = result.referenceRange[0];
      
      if (range.low?.value && value < range.low.value) return true;
      if (range.high?.value && value > range.high.value) return true;
    }
    
    return false;
  }

  isResultCritical(result) {
    if (result.interpretation) {
      const interpretation = result.interpretation[0]?.coding?.[0]?.code;
      return ['AA', 'HH', 'LL'].includes(interpretation);
    }
    return false;
  }

  getResultStatusText(result) {
    if (this.isResultCritical(result)) return 'CRITICAL';
    if (this.isResultAbnormal(result)) return 'ABNORMAL';
    return 'NORMAL';
  }

  getResultDescription(result) {
    if (result.resourceType === 'Observation') {
      return result.code?.text || result.code?.coding?.[0]?.display || 'Lab Result';
    } else if (result.resourceType === 'DiagnosticReport') {
      return result.code?.text || result.code?.coding?.[0]?.display || 'Diagnostic Study';
    }
    return 'Clinical Result';
  }

  generateNoteTitle(result, resultType) {
    const resultName = this.getResultDescription(result);
    const date = new Date().toLocaleDateString();
    const status = this.getResultStatusText(result);
    
    return `${resultName} Results Review - ${status} - ${date}`;
  }

  assessResultUrgency(result) {
    if (this.isResultCritical(result)) return 'critical';
    if (this.isResultAbnormal(result)) return 'warning';
    return 'routine';
  }

  getSuggestedActions(result, resultType) {
    const actions = [];
    
    if (this.isResultCritical(result)) {
      actions.push({
        type: 'notification',
        description: 'Notify patient of critical result immediately',
        priority: 'critical'
      });
      actions.push({
        type: 'followup',
        description: 'Schedule urgent follow-up appointment',
        priority: 'critical'
      });
    }
    
    if (this.isResultAbnormal(result)) {
      actions.push({
        type: 'review',
        description: 'Review result with patient and discuss implications',
        priority: 'high'
      });
      actions.push({
        type: 'retest',
        description: 'Consider repeat testing if clinically indicated',
        priority: 'medium'
      });
    }
    
    // Add result-specific actions
    switch (resultType) {
      case 'lab-diabetes':
        if (result.code?.coding?.[0]?.code === '4548-4' && result.valueQuantity?.value >= 6.5) {
          actions.push({
            type: 'referral',
            description: 'Consider endocrinology referral if not already established',
            priority: 'medium'
          });
        }
        break;
      case 'lab-lipids':
        actions.push({
          type: 'lifestyle',
          description: 'Counseling on diet and exercise modifications',
          priority: 'medium'
        });
        break;
      default:
        // Handle unknown result types
        break;
    }
    
    return actions;
  }

  getLinkedResources(result) {
    return {
      primary: {
        resourceType: result.resourceType,
        id: result.id,
        display: this.getResultDescription(result)
      }
    };
  }

  getLoincCodeForResultType(resultType) {
    const loincCodes = {
      'lab-diabetes': '11506-3',
      'lab-lipids': '11506-3',
      'lab-chemistry': '11506-3',
      'lab-hematology': '11506-3',
      'imaging-chest': '18748-4',
      'imaging-ct': '18748-4',
      'imaging-mri': '18748-4',
      'vital-signs': '11506-3',
      'default': '11506-3'
    };
    
    return loincCodes[resultType] || loincCodes.default;
  }

  getDisplayForResultType(resultType) {
    const displays = {
      'lab-diabetes': 'Diabetes Lab Results Note',
      'lab-lipids': 'Lipid Panel Results Note',
      'lab-chemistry': 'Chemistry Panel Results Note',
      'lab-hematology': 'Hematology Results Note',
      'imaging-chest': 'Chest Imaging Results Note',
      'imaging-ct': 'CT Imaging Results Note',
      'imaging-mri': 'MRI Imaging Results Note',
      'vital-signs': 'Vital Signs Documentation',
      'default': 'Clinical Results Note'
    };
    
    return displays[resultType] || displays.default;
  }
}

// Create singleton instance
export const resultDocumentationService = new ResultDocumentationService();